// pipeline {
//     agent any

//     environment {
//         COMPOSE_FILE = 'compose.yml'
//     }


//     stages {
//         stage('Checkout') {
//             steps {
//                 git branch: 'main', url: 'https://github.com/Tawunchai/serverless-cloud.git'
//             }
//         }

//         stage('Stop Old Containers?') {
//             steps {
//                 sh 'docker-compose -f ${COMPOSE_FILE} down || true'
//             }
//         }

//         stage('Build & Start Containers.') {
//             steps {
//                 sh 'docker-compose -f ${COMPOSE_FILE} build'
//                 sh 'docker-compose -f ${COMPOSE_FILE} up -d'
//             }
//         }
//     }
// }

pipeline {
  agent any

  environment {
    COMPOSE_FILE = 'compose.yml'
    TARGET_SERVICES = 'frontend note-service social-service auth-service notification-service api-gateway reverse-proxy'
  }

  stages {
    stage('======= Checkout Code =======') {
      steps {
        echo 'üßæ Checking out repository...'
        git branch: 'main', url: 'https://github.com/Tawunchai/serverless-cloud.git'
      }
    }

    stage('======= Verify Project Structure =======') {
      steps {
        echo 'üîç Verifying project structure...'
        sh 'ls -la'
        sh 'ls -la frontend/ || echo "Frontend directory not found"'
        sh 'cat frontend/package.json || echo "package.json not found in frontend"'
        sh 'cat frontend/Dockerfile || echo "Dockerfile not found in frontend"'
      }
    }

    stage('======= Clean up Old Containers =======') {
      steps {
        echo 'üßπ Cleaning up Docker containers and images...'
        sh "docker-compose -f $COMPOSE_FILE down -v || true"
        sh "docker system prune -f || true"
      }
    }

    stage('======= Build and Start Containers =======') {
      steps {
        echo 'üöÄ Building and starting services...'
        sh "docker-compose -f $COMPOSE_FILE build --no-cache $TARGET_SERVICES"
        sh "docker-compose -f $COMPOSE_FILE up -d $TARGET_SERVICES"
      }
    }

    stage('======= Debug Container Status =======') {
      steps {
        echo 'üîç Showing container status and logs...'
        sh 'docker ps -a'
        sh 'docker logs frontend --tail 50 || true'
        sh 'docker exec frontend ls -la /app || true'
      }
    }
  }

  post {
    success {
      echo '‚úÖ Deployment successful!'
    }
    failure {
      echo '‚ùå Deployment failed!'
      sh 'docker logs frontend --tail 100 || true'
    }
    always {
      echo 'üßº Post-build cleanup...'
      sh 'docker image prune -f --filter "dangling=true" || true'
    }
  }
}